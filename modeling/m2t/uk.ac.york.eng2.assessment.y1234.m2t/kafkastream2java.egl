package [%=package%];
[%=out.startPreserve("/*","*/", "Imports", true)%]
import java.util.Arrays;
import java.util.Properties;

import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Produced;

import io.micronaut.configuration.kafka.serde.SerdeRegistry;
import io.micronaut.configuration.kafka.streams.ConfiguredStreamBuilder;
import io.micronaut.context.annotation.Factory;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
[%=out.stopPreserve()%]

@Factory
public class [%=classname%] {

	[%if (s.from.isDefined())%]	public static final String FROM_TOPIC = "[%=s.from.name%]";
	[%if (s.to.isDefined())%]	public static final String TO_TOPIC = "[%=s.to.name%]";
	
	@Inject
	SerdeRegistry serdeRegistry;
	
	@Singleton
	public KStream<[%=s.to.eventType.key.type.split("<").first().ftuc()%], [%=s.to.eventType.value.type.split("<").first().ftuc()%]> [%=s.name.ftlc()%](ConfiguredStreamBuilder builder) {
		[%=out.startPreserve("/*","*/", "KafkaStream logic", true)%]
		Properties props = builder.getConfiguration();
		props.put(StreamsConfig.APPLICATION_ID_CONFIG, "trending-microservice");
		props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE);
		
		KStream<[%=s.from.eventType.key.type%], [%=s.from.eventType.value.type%]> input = builder
				.stream(FROM_TOPIC, Consumed.with(serdeRegistry.getSerde([%=s.from.eventType.key.type%].class), serdeRegistry.getSerde([%=s.from.eventType.value.type%].class)));
		
		// Write the Kafka processing here
				
		return null;
		[%=out.stopPreserve()%]
	}
	
	[%=out.startPreserve("/*","*/", "Additional KafkaStream components", true)%]
	// Aggregators, transformers, etc	
	[%=out.stopPreserve()%]
}
